generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum DefaultEnum {
  DEFAULT
}

model Settings {
  key                              DefaultEnum @id @default(DEFAULT)
  tgStarsToUSD                     Float       @default(0.013) @map("tg_stars_to_usd")
  priceSubscriptionStars           Int         @default(700) @map("price_subscription_stars")
  comissionStarsToTon              Float       @default(0.90) @map("comission_stars_to_ton")
  adsRewardStars                   Float       @default(0.1) @map("ads_reward_stars")
  adsTaskRewardStars               Float       @default(10) @map("ads_task_reward_stars")
  hourRatioPayment                 Float       @default(1.39) @map("hour_ratio_payment")
  dayRatioPayment                  Float       @default(1.31) @map("day_ratio_payment")
  threeMouthesRatioPayment         Float       @default(0.97) @map("three_mouthes_ratio_payment")
  sixMouthesRatioPayment           Float       @default(0.94) @map("six_mouthes_ratio_payment")
  oneYearRatioPayment              Float       @default(0.88) @map("one_year_ratio_payment")
  twoYearRatioPayment              Float       @default(0.76) @map("two_year_ratio_payment")
  threeYearRatioPayment            Float       @default(0.64) @map("three_year_ratio_payment")
  referralOneLevelPercent          Float       @default(0.1) @map("referral_one_level_percent")
  referralTwoLevelPercent          Float       @default(0.05) @map("referral_two_level_percent")
  referralThreeLevelPercent        Float       @default(0.01) @map("referral_three_level_percent")
  referralInviteRewardStars        Float       @default(10) @map("referral_invite_reward_stars")
  referralInvitePremiumRewardStars Float       @default(50) @map("referral_invite_premiumreward_stars")
  limitDevices                     Int         @default(10) @map("limit_devices")
  freePlanDays                     Int         @default(7) @map("free_plan_days")
  freePlanDaysForReferrals         Int         @default(14) @map("free_plan_days_for_referrals")
  limitSubscriptions               Int         @default(10) @map("limit_subscriptions")

  @@map("settings")
}

model UserTelegramData {
  id                    String   @id @default(uuid())
  isLive                Boolean  @default(false) @map("is_live")
  isRtl                 Boolean  @default(false) @map("is_rtl")
  isPremium             Boolean  @default(false) @map("is_premium")
  isBot                 Boolean  @default(false) @map("is_bot")
  firstName             String   @map("first_name")
  lastName              String?  @map("last_name")
  username              String?
  languageCode          String   @map("language_code")
  photoUrl              String?  @map("photo_url")
  addedToAttachmentMenu Boolean  @default(false) @map("added_to_attachment_menu")
  allowsWriteToPm       Boolean  @default(false) @map("allows_write_to_pm")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user Users?

  @@map("user_telegram_data")
}

model Referrals {
  id         String @id @default(uuid())
  level      Int    @default(1)
  inviter    Users  @relation("inviter", fields: [inviterId], references: [id])
  inviterId  String @map("inviter_id")
  referral   Users  @relation("referral", fields: [referralId], references: [id])
  referralId String @map("referral_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("referrals")
}

model Users {
  id                  String  @id @default(uuid())
  telegramId          String  @unique @map("telegram_id")
  tonWallet           String? @unique @map("ton_wallet")
  isFreePlanAvailable Boolean @default(true) @map("is_free_plan_available")
  isBanned            Boolean @default(false) @map("is_banned")
  isDeleted           Boolean @default(false) @map("is_deleted")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastStartedAt DateTime? @map("last_started_at")
  banExpiredAt  DateTime? @map("banned_expired_at")
  deletedAt     DateTime? @map("deleted_at")

  role           Roles             @relation(fields: [roleId], references: [key])
  roleId         UserRoleEnum      @default(USER) @map("role_id")
  // payments           Payments[]
  referrals      Referrals[]       @relation("referral")
  inviters       Referrals[]       @relation("inviter")
  telegramData   UserTelegramData? @relation(fields: [telegramDataId], references: [id])
  telegramDataId String?           @unique @map("telegram_data_id")
  balance        UserBalance?      @relation(fields: [balanceId], references: [id])
  balanceId      String?           @unique @map("balance_id")
  language       Language          @relation(fields: [languageId], references: [id])
  languageId     String            @map("language_id")

  @@map("users")
}

model UserBalance {
  id                     String   @id @default(uuid())
  paymentBalance         Float    @default(0) @map("payment_balance")
  holdBalance            Float    @default(0) @map("hold_balance")
  withdrawalBalance      Float    @default(0) @map("withdrawal_balance")
  isUseWithdrawalBalance Boolean  @default(true) @map("is_use_withdrawal_balance")
  updatedAt              DateTime @updatedAt @map("updated_at")
  user                   Users?

  @@map("user_balance")
}

model Roles {
  key      UserRoleEnum @id
  discount Float        @default(1)

  users Users[]

  @@map("roles")
}

enum UserRoleEnum {
  SUPER_ADMIN
  ADMIN
  FRIEND
  OLD_USER
  USER
}

model Language {
  id         String @id @default(uuid())
  name       String
  nativeName String @map("native_name")
  iso6391    String @unique @map("iso_639_1")
  iso6392    String @unique @map("iso_639_2")
  iso6393    String @unique @map("iso_639_3")

  users Users[]

  @@map("language")
}
